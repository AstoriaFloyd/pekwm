AC_INIT
AM_INIT_AUTOMAKE(pekwm, 0.1.2)
AC_PROG_CXX
AC_PROG_INSTALL

AC_PATH_X
AC_PATH_XTRA

CFLAGS="$CFLAGS $X_CFLAGS"
CXXFLAGS="$CXXFLAGS $X_CFLAGS"
LIBS="$LIBS $X_LIBS"
LDFLAGS="$LDFLAGS $LIBS $X_PRE_LIBS"

NSENV=
AC_CHECK_FUNCS(setenv,,NSENV="-DNEED_SETENV")
CXXFLAGS="$CXXFLAGS $NSENV"


dnl we may want this later
dnl AC_CHECK_PROGS(regex_cmd, sed)
dnl if test x$regex_cmd = "x"; then
dnl  AC_MSG_ERROR([error. sed is required to build the default style file.])
dnl fi

AC_CHECK_LIB(X11, XOpenDisplay,
  LIBS="$LIBS -lX11",
  AC_MSG_ERROR([Could not find XOpenDisplay in -lX11.])
)

AC_LANG_SAVE
AC_LANG_CPLUSPLUS


dnl FIXME: Should we be checking for xpm dynamically?
AC_CHECK_LIB(Xpm, XpmReadFileToPixmap,
  LIBS="$LIBS -lXpm",
  AC_MSG_ERROR([Could not find XpmReadFileToPixmap in -lXpm.])
)

dnl Check for XShape extension support and proper library files
SHAPE=""
enableval="yes"
AC_MSG_CHECKING([whether to build support for the XShape extension])
AC_ARG_ENABLE(
  shape, [  --enable-shape          enable support of the XShape extension [default=yes]])

: ${enableval="yes"}
if test x$enableval = "xyes"; then
  AC_MSG_RESULT([yes])
  AC_CHECK_LIB(Xext, XShapeCombineShape,
    AC_MSG_CHECKING([for X11/extensions/shape.h])
    AC_TRY_COMPILE(
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/extensions/shape.h>
      , long foo = ShapeSet,
      AC_MSG_RESULT([yes])
      SHAPE="-DSHAPE"; Xext_lib="-lXext",
      AC_MSG_RESULT([no])
    )
  )
else
  AC_MSG_RESULT([no])
fi
AC_SUBST(SHAPE)

CXXFLAGS="$CXXFLAGS $SHAPE"
LIBS="$LIBS $Xext_lib"

dnl Checks for Xft library support
enableval="no"
XFT=""
Xft_lib=""
AC_MSG_CHECKING([whether to build support for the Xft library])
AC_ARG_ENABLE(
  xft, [  --enable-xft            enable support of the Xft library if available [default=no]])
: ${enableval="no"}
if test x$enableval = "xyes"; then
  AC_CHECK_LIB(Xft, XftFontOpen,
    Xft_lib="-lXft";XFT="-DXFT",
    AC_MSG_ERROR([Could not find XftFontOpen in -lXft.])
  )
else
  AC_MSG_RESULT([no])
fi
AC_SUBST(XFT)

LIBS="$LIBS $Xft_lib"
CXXFLAGS="$CXXFLAGS $XFT"

dnl Check for Xinerama support
XINERAMA=""
AC_MSG_CHECKING([whether to build support for the Xinerama extension])
AC_ARG_ENABLE(xinerama,
[  --enable-xinerama       enable xinerama extension [default=no]], , [enable_xinerama=no])

if test "x$enable_xinerama" = "xyes"; then
	AC_MSG_RESULT([yes])
	AC_CHECK_LIB(Xinerama, XineramaQueryScreens,
			XINERAMA="-DXINERAMA"; Xinerama_libs="-lXinerama", )
else
	AC_MSG_RESULT([no])
fi
AC_SUBST(XINERAMA)
CXXFLAGS="$CXXFLAGS $XINERAMA"

LIBS="$LIBS $Xinerama_libs"


dnl Check whether to include debugging code
DEBUG=""
AC_MSG_CHECKING([whether to include verbose debugging code])
AC_ARG_ENABLE(debug,
  [  --enable-debug          include verbose debugging code [default=no]],
  if test x$enableval = "xyes"; then
    AC_MSG_RESULT([yes])
    DEBUG="-DDEBUG"
  else
    AC_MSG_RESULT([no])
  fi,
  AC_MSG_RESULT([no])
)
AC_SUBST(DEBUG)
CXXFLAGS="$CXXFLAGS $DEBUG"

dnl Check whether to use menus
enableval="yes"
MENU=""
AC_MSG_CHECKING([whether to include menu support])
AC_ARG_ENABLE(menus,
  [  --enable-menus          include menu support [default=yes]])
: ${enableval="yes"}
if test x$enableval = "xyes"; then
    AC_MSG_RESULT([yes])
    MENU="-DMENUS"
else
    AC_MSG_RESULT([no])
fi
AC_SUBST(MENU)
CXXFLAGS="$CXXFLAGS $MENU"

dnl Check whether to include keygrabber
enableval="yes"
KEYS=""
AC_MSG_CHECKING([whether to include keygrabber support])
AC_ARG_ENABLE(keygrabber,
  [  --enable-keygrabber     include keygrabber support [default=yes]])
: ${enableval="yes"}
if test x$enableval = "xyes"; then
    AC_MSG_RESULT([yes])
    KEYS="-DKEYS"
else
    AC_MSG_RESULT([no])
fi
AC_SUBST(KEYS)
CXXFLAGS="$CXXFLAGS $KEYS"

dnl Check whether to include harbour
enableval="no"
HARBOUR=""
AC_MSG_CHECKING([whether to include harbour])
AC_ARG_ENABLE(harbour,
  [  --enable-harbour        include harbour [default=no]])
: ${enableval="no"}
if test x$enableval = "xyes"; then
    AC_MSG_RESULT([yes])
    HARBOUR="-DHARBOUR"
else
    AC_MSG_RESULT([no])
fi
AC_SUBST(HARBOUR)
CXXFLAGS="$CXXFLAGS $HARBOUR"


dnl AC_OUTPUT([testme])
AC_OUTPUT([
		   Makefile 
		   src/Makefile 
		   data/Makefile 
		   data/themes/Makefile 
		   docs/Makefile
		   ])
dnl data/Makefile
dnl data/actions/Makefile
dnl data/styles/Makefile
dnl data/backgrounds/Makefile
dnl doc/Makefile])

dnl Print results
AC_MSG_RESULT([*])
AC_MSG_RESULT([* $PACKAGE version $VERSION configured successfully.])
AC_MSG_RESULT([*])
AC_MSG_RESULT([* Using '$prefix' for installation.])
AC_MSG_RESULT([* Using '$CXX' for C++ compiler.])
AC_MSG_RESULT([* Building with '$CXXFLAGS' for C++ compiler flags.])
AC_MSG_RESULT([* Building with '$LIBS' for linker flags.])
AC_MSG_RESULT([*])
AC_MSG_RESULT([* Now you may build with 'make'  ])
AC_MSG_RESULT([*])


