#!@SH@
#
# Copyright (C) 2021 Claes Nästén
#

# URL for the pekwm theme site
PEKWM_THEMES="https://www.pekwm.se/themes"
# URL for the theme index file
REMOTE_THEME_INDEX="$PEKWM_THEMES/themes-v1.csv"
# Path to local copy of the theme index file
LOCAL_THEME_INDEX="$HOME/.pekwm/themes-v1.csv"
# Path to local directory where screenshots are cached, used with the
# show command.
SCREENSHOT_CACHE_DIR="$HOME/.cache/pekwm-themes"
# Field delimiter
SEP="¤"

# Stop execution with exit code 1 after printing provided error
# message
#
# die error message
die()
{
    echo "ERROR: $@"
    exit 1
}

# Print progress message
#
# progress progress message
progress()
{
    echo "`date '+%Y%m%dT%H:%M:%S'`: $@"
}

# Print usage information
#
# usage exit-code
usage()
{
    echo "usage: $0 [install|uninstall|show|search]"
    exit $1
}

# Fetch remote file using HTTP(S)/FTP.
#
# fetch_file url local-path
fetch_file()
{
    progress "fetching $1 to $2..."

    CURL=`which curl 2>/dev/null`
    WGET=`which wget 2>/dev/null`
    FTP=`which ftp 2>/dev/null`

    if test "x$CURL" != "x"; then
        $CURL -L -s -o "$2" "$1"
    elif test "$WGET" != "x"; then
        $WGET -q -o "$2" "$1"
    elif test "$FTP" != "x"; then
        $FTP -h 2>&1 | grep -q http
        if $? -eq 0; then
            $FTP -o "$2" "$1"
        else
            die "unsupported ftp, no HTTP support"
        fi
    else
        die "no supported HTTP client (curl, wget, BSD ftp)"
    fi
}

# Update local copy of the theme index
#
# update_index
update_index()
{
    mkdir -p "$HOME/.pekwm"
    if test ! -e "$LOCAL_THEME_INDEX"; then
        fetch_file "$REMOTE_THEME_INDEX" "$LOCAL_THEME_INDEX"
    fi
}

# Read theme data from the local theme index, populates theme_remote,
# theme_branch, theme_author and theme_title
#
# read_theme name
read_theme()
{
    line=`sed 1d $LOCAL_THEME_INDEX | grep "^$1$SEP"`
    if test -z "$line"; then
        die "no theme named $1"
    fi
    theme_name="$1"
    theme_remote=`echo $line | awk -F "$SEP" '{ print $2 }'`
    theme_branch=`echo $line | awk -F "$SEP" '{ print $3 }'`
    theme_base_path=`echo $line | awk -F "$SEP" '{ print $4 }'`
    theme_author=`echo $line | awk -F "$SEP" '{ print $6 }'`
    theme_title=`echo $line | awk -F "$SEP" '{ print $7 }'`
}

# Set theme_path to local theme path
#
# set_theme_path name
set_theme_path()
{
    theme_path="$HOME/.pekwm/themes/$1"
}

# Install theme to $HOME/.pekwm/themes, if activate is given the
# current theme is changed.
#
# theme_install name [activate]
theme_install()
{
    read_theme "$1"
    set_theme_path "$1"

    if test -z "$theme_base_path"; then
        theme_install_plain
    else
        theme_install_base_path
    fi

    if test "x$2" = "xactivate"; then
        @CMAKE_INSTALL_PREFIX@/share/pekwm/scripts/pekwm_themeset.sh \
         "$HOME/.pekwm/themes" "$theme_path"
    fi
}

# Install/update theme residing in the root of the GIT repository (use
# the theme_ variables from read_theme)
#
# theme_install_plain
theme_install_plain()
{
    git_update_repo "$theme_remote" "$theme_branch" "$theme_path"
}

# Install/update theme not in the root of the GIT repository (use the
# theme_ variables from read_theme)
#
# theme_install_base_path
theme_install_base_path()
{
    mkdir -p "$HOME/.pekwm/themes_git"
    repo_path="$HOME/.pekwm/themes_git/`echo $theme_remote | tr -cd '[:alnum:]'`"
    git_update_repo "$theme_remote" "$theme_branch" "$repo_path"

    ln -sf "$repo_path/$theme_base_path" "$HOME/.pekwm/themes/$theme_name"
}

# Clone or update GIT repository
#
# remote branch local-path
git_update_repo()
{
    if test -d "$3"; then
        echo "$3 already exist, updating"
        git -C "$3" remote set-url origin "$1"
        git -C "$3" fetch origin
    else
        echo "cloning $1"
        git clone "$1" "$3"
    fi

    git -C "$3" checkout "$2"
    git -C "$3" reset --hard "origin/$2"
}

# Uninstall theme from $HOME/.pekwm/themes
#
# theme_uninstall name
theme_uninstall()
{
    read_theme $1
    set_theme_path $1
    if test -d "$theme_path"; then
        echo "uninstalling $1"
        rm -rf "$theme_path"
    fi
}

# Update local copy of theme screenshot
#
# update_theme_screenshot name
update_theme_screenshot()
{
    mkdir -p $SCREENSHOT_CACHE_DIR
    path="$SCREENSHOT_CACHE_DIR/$1.png"
    if test ! -e "$path"; then
        fetch_file $PEKWM_THEMES/$1.png $path
    fi
}

# Search for the
#
# theme_search [pattern]
theme_search()
{
    if test -z "$1"; then
        echo "available themes:"
    else
        echo "themes matching $1:"
    fi

    sed 1d "$LOCAL_THEME_INDEX" | awk -F "$SEP" '{ print $1 }' | grep "$1"
}

# Show theme using pekwm_dialog, if install is choosen the theme is
# installed and activated.
#
# theme_show name
theme_show()
{
    read_theme "$1"
    set_theme_path "$1"
    update_theme_screenshot "$1"
    pekwm_dialog -i "$SCREENSHOT_CACHE_DIR/$1.png" -t "pekwm theme: $1" \
                 -o Install -o Close $theme_title
    if test $? -eq 0; then
        theme_install "$1" "activate"
    fi
}

if test -z "$HOME"; then
    die "\$HOME is not set, can not proceed"
fi
if test -z "`which git`"; then
    die "git must be available in the path, can not proceed"
fi

if test -z "$1"; then
    usage 1
else
    update_index

    if test "x$1" = "xinstall"; then
        if test "$2" = "-a"; then
            theme_install "$3" "activate"
        else
            theme_install "$2"
        fi
    elif test "x$1" = "xuninstall"; then
        theme_uninstall "$2"
    elif test "x$1" = "xshow"; then
        theme_show "$2" "$3"
    elif test "x$1" = "xsearch"; then
        theme_search "$2"
    else
        usage 1
    fi
fi
